(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_lua"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
]

let children_regexps : (string * Run.exp option) list = [
  "self", None;
  "false", None;
  "nil", None;
  "number", None;
  "global_variable",
  Some (
    Alt [|
      Token (Literal "_G");
      Token (Literal "_VERSION");
    |];
  );
  "break_statement", None;
  "empty_statement", None;
  "string", None;
  "next", None;
  "spread", None;
  "true", None;
  "field_sep",
  Some (
    Alt [|
      Token (Literal ",");
      Token (Literal ";");
    |];
  );
  "identifier", None;
  "comment", None;
  "local_variable_declarator",
  Some (
    Seq [
      Token (Name "identifier");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "identifier");
        ];
      );
    ];
  );
  "parameters",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Alt [|
            Token (Name "self");
            Token (Name "spread");
            Token (Name "identifier");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "identifier");
            ];
          );
          Opt (
            Seq [
              Token (Literal ",");
              Token (Name "spread");
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "label_statement",
  Some (
    Seq [
      Token (Literal "::");
      Token (Name "identifier");
      Token (Literal "::");
    ];
  );
  "goto_statement",
  Some (
    Seq [
      Token (Literal "goto");
      Token (Name "identifier");
    ];
  );
  "function_name_field",
  Some (
    Seq [
      Token (Name "identifier");
      Repeat (
        Seq [
          Token (Literal ".");
          Token (Name "identifier");
        ];
      );
    ];
  );
  "function_name",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "function_name_field");
      |];
      Opt (
        Seq [
          Token (Literal ":");
          Token (Name "identifier");
        ];
      );
    ];
  );
  "arguments",
  Some (
    Alt [|
      Seq [
        Token (Literal "(");
        Opt (
          Seq [
            Token (Name "expression");
            Repeat (
              Seq [
                Token (Literal ",");
                Token (Name "expression");
              ];
            );
          ];
        );
        Token (Literal ")");
      ];
      Token (Name "table");
      Token (Name "string");
    |];
  );
  "binary_operation",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Token (Literal "or");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "and");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "==");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "~=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "|");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "~");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<<");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">>");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "+");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "-");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "*");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "/");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "//");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "%");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "..");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "^");
        Token (Name "expression");
      ];
    |];
  );
  "do_statement",
  Some (
    Seq [
      Token (Literal "do");
      Repeat (
        Alt [|
          Token (Name "expression");
          Token (Name "variable_declaration");
          Token (Name "local_variable_declaration");
          Token (Name "do_statement");
          Token (Name "if_statement");
          Token (Name "while_statement");
          Token (Name "repeat_statement");
          Token (Name "for_statement");
          Token (Name "for_in_statement");
          Token (Name "goto_statement");
          Token (Name "break_statement");
          Token (Name "label_statement");
          Token (Name "empty_statement");
          Token (Name "function_statement");
          Token (Name "local_function_statement");
          Token (Name "function_call_statement");
        |];
      );
      Opt (
        Token (Name "return_statement");
      );
      Token (Literal "end");
    ];
  );
  "else",
  Some (
    Seq [
      Token (Literal "else");
      Repeat (
        Alt [|
          Token (Name "expression");
          Token (Name "variable_declaration");
          Token (Name "local_variable_declaration");
          Token (Name "do_statement");
          Token (Name "if_statement");
          Token (Name "while_statement");
          Token (Name "repeat_statement");
          Token (Name "for_statement");
          Token (Name "for_in_statement");
          Token (Name "goto_statement");
          Token (Name "break_statement");
          Token (Name "label_statement");
          Token (Name "empty_statement");
          Token (Name "function_statement");
          Token (Name "local_function_statement");
          Token (Name "function_call_statement");
        |];
      );
      Opt (
        Token (Name "return_statement");
      );
    ];
  );
  "elseif",
  Some (
    Seq [
      Token (Literal "elseif");
      Token (Name "expression");
      Token (Literal "then");
      Repeat (
        Alt [|
          Token (Name "expression");
          Token (Name "variable_declaration");
          Token (Name "local_variable_declaration");
          Token (Name "do_statement");
          Token (Name "if_statement");
          Token (Name "while_statement");
          Token (Name "repeat_statement");
          Token (Name "for_statement");
          Token (Name "for_in_statement");
          Token (Name "goto_statement");
          Token (Name "break_statement");
          Token (Name "label_statement");
          Token (Name "empty_statement");
          Token (Name "function_statement");
          Token (Name "local_function_statement");
          Token (Name "function_call_statement");
        |];
      );
      Opt (
        Token (Name "return_statement");
      );
    ];
  );
  "expression",
  Some (
    Alt [|
      Token (Name "spread");
      Token (Name "prefix");
      Token (Name "next");
      Token (Name "function_definition");
      Token (Name "table");
      Token (Name "binary_operation");
      Token (Name "unary_operation");
      Token (Name "string");
      Token (Name "number");
      Token (Name "nil");
      Token (Name "true");
      Token (Name "false");
      Token (Name "identifier");
    |];
  );
  "field",
  Some (
    Alt [|
      Seq [
        Token (Literal "[");
        Token (Name "expression");
        Token (Literal "]");
        Token (Literal "=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "identifier");
        Token (Literal "=");
        Token (Name "expression");
      ];
      Token (Name "expression");
    |];
  );
  "field_expression",
  Some (
    Seq [
      Token (Name "prefix");
      Token (Literal ".");
      Token (Name "identifier");
    ];
  );
  "field_sequence",
  Some (
    Seq [
      Token (Name "field");
      Repeat (
        Seq [
          Token (Name "field_sep");
          Token (Name "field");
        ];
      );
      Opt (
        Token (Name "field_sep");
      );
    ];
  );
  "for_in_statement",
  Some (
    Seq [
      Token (Literal "for");
      Token (Name "in_loop_expression");
      Token (Literal "do");
      Repeat (
        Alt [|
          Token (Name "expression");
          Token (Name "variable_declaration");
          Token (Name "local_variable_declaration");
          Token (Name "do_statement");
          Token (Name "if_statement");
          Token (Name "while_statement");
          Token (Name "repeat_statement");
          Token (Name "for_statement");
          Token (Name "for_in_statement");
          Token (Name "goto_statement");
          Token (Name "break_statement");
          Token (Name "label_statement");
          Token (Name "empty_statement");
          Token (Name "function_statement");
          Token (Name "local_function_statement");
          Token (Name "function_call_statement");
        |];
      );
      Opt (
        Token (Name "return_statement");
      );
      Token (Literal "end");
    ];
  );
  "for_statement",
  Some (
    Seq [
      Token (Literal "for");
      Token (Name "loop_expression");
      Token (Literal "do");
      Repeat (
        Alt [|
          Token (Name "expression");
          Token (Name "variable_declaration");
          Token (Name "local_variable_declaration");
          Token (Name "do_statement");
          Token (Name "if_statement");
          Token (Name "while_statement");
          Token (Name "repeat_statement");
          Token (Name "for_statement");
          Token (Name "for_in_statement");
          Token (Name "goto_statement");
          Token (Name "break_statement");
          Token (Name "label_statement");
          Token (Name "empty_statement");
          Token (Name "function_statement");
          Token (Name "local_function_statement");
          Token (Name "function_call_statement");
        |];
      );
      Opt (
        Token (Name "return_statement");
      );
      Token (Literal "end");
    ];
  );
  "function_body",
  Some (
    Seq [
      Token (Name "parameters");
      Repeat (
        Alt [|
          Token (Name "expression");
          Token (Name "variable_declaration");
          Token (Name "local_variable_declaration");
          Token (Name "do_statement");
          Token (Name "if_statement");
          Token (Name "while_statement");
          Token (Name "repeat_statement");
          Token (Name "for_statement");
          Token (Name "for_in_statement");
          Token (Name "goto_statement");
          Token (Name "break_statement");
          Token (Name "label_statement");
          Token (Name "empty_statement");
          Token (Name "function_statement");
          Token (Name "local_function_statement");
          Token (Name "function_call_statement");
        |];
      );
      Opt (
        Token (Name "return_statement");
      );
      Token (Literal "end");
    ];
  );
  "function_call_statement",
  Some (
    Alt [|
      Seq [
        Token (Name "prefix");
        Token (Name "arguments");
      ];
      Seq [
        Token (Name "prefix");
        Token (Literal ":");
        Token (Name "identifier");
        Token (Name "arguments");
      ];
    |];
  );
  "function_definition",
  Some (
    Seq [
      Token (Literal "function");
      Token (Name "function_body");
    ];
  );
  "function_statement",
  Some (
    Seq [
      Token (Literal "function");
      Token (Name "function_name");
      Token (Name "function_body");
    ];
  );
  "if_statement",
  Some (
    Seq [
      Token (Literal "if");
      Token (Name "expression");
      Token (Literal "then");
      Repeat (
        Alt [|
          Token (Name "expression");
          Token (Name "variable_declaration");
          Token (Name "local_variable_declaration");
          Token (Name "do_statement");
          Token (Name "if_statement");
          Token (Name "while_statement");
          Token (Name "repeat_statement");
          Token (Name "for_statement");
          Token (Name "for_in_statement");
          Token (Name "goto_statement");
          Token (Name "break_statement");
          Token (Name "label_statement");
          Token (Name "empty_statement");
          Token (Name "function_statement");
          Token (Name "local_function_statement");
          Token (Name "function_call_statement");
        |];
      );
      Opt (
        Token (Name "return_statement");
      );
      Repeat (
        Token (Name "elseif");
      );
      Opt (
        Token (Name "else");
      );
      Token (Literal "end");
    ];
  );
  "in_loop_expression",
  Some (
    Seq [
      Token (Name "identifier");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "identifier");
        ];
      );
      Token (Literal "in");
      Token (Name "expression");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "expression");
        ];
      );
    ];
  );
  "local_function_statement",
  Some (
    Seq [
      Token (Literal "local");
      Token (Literal "function");
      Token (Name "identifier");
      Token (Name "function_body");
    ];
  );
  "local_variable_declaration",
  Some (
    Seq [
      Token (Literal "local");
      Token (Name "local_variable_declarator");
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "expression");
            ];
          );
        ];
      );
    ];
  );
  "loop_expression",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal "=");
      Token (Name "expression");
      Token (Literal ",");
      Token (Name "expression");
      Opt (
        Seq [
          Token (Literal ",");
          Token (Name "expression");
        ];
      );
    ];
  );
  "prefix",
  Some (
    Alt [|
      Token (Name "self");
      Token (Name "global_variable");
      Token (Name "variable_declarator");
      Token (Name "function_call_statement");
      Seq [
        Token (Literal "(");
        Token (Name "expression");
        Token (Literal ")");
      ];
    |];
  );
  "repeat_statement",
  Some (
    Seq [
      Token (Literal "repeat");
      Repeat (
        Alt [|
          Token (Name "expression");
          Token (Name "variable_declaration");
          Token (Name "local_variable_declaration");
          Token (Name "do_statement");
          Token (Name "if_statement");
          Token (Name "while_statement");
          Token (Name "repeat_statement");
          Token (Name "for_statement");
          Token (Name "for_in_statement");
          Token (Name "goto_statement");
          Token (Name "break_statement");
          Token (Name "label_statement");
          Token (Name "empty_statement");
          Token (Name "function_statement");
          Token (Name "local_function_statement");
          Token (Name "function_call_statement");
        |];
      );
      Opt (
        Token (Name "return_statement");
      );
      Token (Literal "until");
      Token (Name "expression");
    ];
  );
  "return_statement",
  Some (
    Seq [
      Token (Literal "return");
      Opt (
        Seq [
          Token (Name "expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "expression");
            ];
          );
        ];
      );
      Opt (
        Token (Name "empty_statement");
      );
    ];
  );
  "table",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Token (Name "field_sequence");
      );
      Token (Literal "}");
    ];
  );
  "unary_operation",
  Some (
    Seq [
      Alt [|
        Token (Literal "not");
        Token (Literal "#");
        Token (Literal "-");
        Token (Literal "~");
      |];
      Token (Name "expression");
    ];
  );
  "variable_declaration",
  Some (
    Seq [
      Token (Name "variable_declarator");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "variable_declarator");
        ];
      );
      Token (Literal "=");
      Token (Name "expression");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "expression");
        ];
      );
    ];
  );
  "variable_declarator",
  Some (
    Alt [|
      Token (Name "identifier");
      Seq [
        Token (Name "prefix");
        Token (Literal "[");
        Token (Name "expression");
        Token (Literal "]");
      ];
      Token (Name "field_expression");
    |];
  );
  "while_statement",
  Some (
    Seq [
      Token (Literal "while");
      Token (Name "expression");
      Token (Literal "do");
      Repeat (
        Alt [|
          Token (Name "expression");
          Token (Name "variable_declaration");
          Token (Name "local_variable_declaration");
          Token (Name "do_statement");
          Token (Name "if_statement");
          Token (Name "while_statement");
          Token (Name "repeat_statement");
          Token (Name "for_statement");
          Token (Name "for_in_statement");
          Token (Name "goto_statement");
          Token (Name "break_statement");
          Token (Name "label_statement");
          Token (Name "empty_statement");
          Token (Name "function_statement");
          Token (Name "local_function_statement");
          Token (Name "function_call_statement");
        |];
      );
      Opt (
        Token (Name "return_statement");
      );
      Token (Literal "end");
    ];
  );
  "program",
  Some (
    Seq [
      Repeat (
        Alt [|
          Token (Name "expression");
          Token (Name "variable_declaration");
          Token (Name "local_variable_declaration");
          Token (Name "do_statement");
          Token (Name "if_statement");
          Token (Name "while_statement");
          Token (Name "repeat_statement");
          Token (Name "for_statement");
          Token (Name "for_in_statement");
          Token (Name "goto_statement");
          Token (Name "break_statement");
          Token (Name "label_statement");
          Token (Name "empty_statement");
          Token (Name "function_statement");
          Token (Name "local_function_statement");
          Token (Name "function_call_statement");
        |];
      );
      Opt (
        Token (Name "return_statement");
      );
    ];
  );
]

let trans_self ((kind, body) : mt) : CST.self =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_false_ ((kind, body) : mt) : CST.false_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_nil ((kind, body) : mt) : CST.nil =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_number ((kind, body) : mt) : CST.number =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_global_variable ((kind, body) : mt) : CST.global_variable =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `X__G (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `X__VERSION (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_break_statement ((kind, body) : mt) : CST.break_statement =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_empty_statement ((kind, body) : mt) : CST.empty_statement =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_ ((kind, body) : mt) : CST.string_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_next ((kind, body) : mt) : CST.next =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_spread ((kind, body) : mt) : CST.spread =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_true_ ((kind, body) : mt) : CST.true_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_field_sep ((kind, body) : mt) : CST.field_sep =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `COMMA (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `SEMI (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_local_variable_declarator ((kind, body) : mt) : CST.local_variable_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_parameters ((kind, body) : mt) : CST.parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Self (
                            trans_self (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Spread (
                            trans_spread (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_identifier (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_spread (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_label_statement ((kind, body) : mt) : CST.label_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_goto_statement ((kind, body) : mt) : CST.goto_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_function_name_field ((kind, body) : mt) : CST.function_name_field =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_function_name ((kind, body) : mt) : CST.function_name =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Func_name_field (
                  trans_function_name_field (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_arguments ((kind, body) : mt) : CST.arguments =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `LPAR_opt_exp_rep_COMMA_exp_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_expression (Run.matcher_token v0),
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      Run.trans_token (Run.matcher_token v0),
                                      trans_expression (Run.matcher_token v1)
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Table (
            trans_table (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Str (
            trans_string_ (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_operation ((kind, body) : mt) : CST.binary_operation =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_or_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_and_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Exp_LT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Exp_LTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Exp_EQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Exp_TILDEEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Exp_GTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Exp_GT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (8, v) ->
          `Exp_BAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (9, v) ->
          `Exp_TILDE_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (10, v) ->
          `Exp_AMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (11, v) ->
          `Exp_LTLT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (12, v) ->
          `Exp_GTGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (13, v) ->
          `Exp_PLUS_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (14, v) ->
          `Exp_DASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (15, v) ->
          `Exp_STAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (16, v) ->
          `Exp_SLASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (17, v) ->
          `Exp_SLASHSLASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (18, v) ->
          `Exp_PERC_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (19, v) ->
          `Exp_DOTDOT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (20, v) ->
          `Exp_HAT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_do_statement ((kind, body) : mt) : CST.do_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Var_decl (
                      trans_variable_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Local_var_decl (
                      trans_local_variable_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Repeat_stmt (
                      trans_repeat_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_in_stmt (
                      trans_for_in_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Goto_stmt (
                      trans_goto_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Label_stmt (
                      trans_label_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Func_stmt (
                      trans_function_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Local_func_stmt (
                      trans_local_function_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Func_call_stmt (
                      trans_function_call_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> trans_return_statement (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_else_ ((kind, body) : mt) : CST.else_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Var_decl (
                      trans_variable_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Local_var_decl (
                      trans_local_variable_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Repeat_stmt (
                      trans_repeat_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_in_stmt (
                      trans_for_in_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Goto_stmt (
                      trans_goto_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Label_stmt (
                      trans_label_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Func_stmt (
                      trans_function_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Local_func_stmt (
                      trans_local_function_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Func_call_stmt (
                      trans_function_call_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> trans_return_statement (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_elseif ((kind, body) : mt) : CST.elseif =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Var_decl (
                      trans_variable_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Local_var_decl (
                      trans_local_variable_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Repeat_stmt (
                      trans_repeat_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_in_stmt (
                      trans_for_in_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Goto_stmt (
                      trans_goto_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Label_stmt (
                      trans_label_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Func_stmt (
                      trans_function_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Local_func_stmt (
                      trans_local_function_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Func_call_stmt (
                      trans_function_call_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> trans_return_statement (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression ((kind, body) : mt) : CST.expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Spread (
            trans_spread (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Prefix (
            trans_prefix (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Next (
            trans_next (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Func_defi (
            trans_function_definition (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Table (
            trans_table (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Bin_oper (
            trans_binary_operation (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Un_oper (
            trans_unary_operation (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Str (
            trans_string_ (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Num (
            trans_number (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Nil (
            trans_nil (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `True (
            trans_true_ (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `False (
            trans_false_ (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field ((kind, body) : mt) : CST.field =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `LBRACK_exp_RBRACK_EQ_exp (
            (match v with
            | Seq [v0; v1; v2; v3; v4] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2),
                  Run.trans_token (Run.matcher_token v3),
                  trans_expression (Run.matcher_token v4)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Id_EQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_identifier (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Exp (
            trans_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_expression ((kind, body) : mt) : CST.field_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_prefix (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_sequence ((kind, body) : mt) : CST.field_sequence =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_field (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_field_sep (Run.matcher_token v0),
                      trans_field (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> trans_field_sep (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_in_statement ((kind, body) : mt) : CST.for_in_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_in_loop_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Var_decl (
                      trans_variable_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Local_var_decl (
                      trans_local_variable_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Repeat_stmt (
                      trans_repeat_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_in_stmt (
                      trans_for_in_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Goto_stmt (
                      trans_goto_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Label_stmt (
                      trans_label_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Func_stmt (
                      trans_function_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Local_func_stmt (
                      trans_local_function_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Func_call_stmt (
                      trans_function_call_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> trans_return_statement (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_statement ((kind, body) : mt) : CST.for_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_loop_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Var_decl (
                      trans_variable_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Local_var_decl (
                      trans_local_variable_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Repeat_stmt (
                      trans_repeat_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_in_stmt (
                      trans_for_in_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Goto_stmt (
                      trans_goto_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Label_stmt (
                      trans_label_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Func_stmt (
                      trans_function_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Local_func_stmt (
                      trans_local_function_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Func_call_stmt (
                      trans_function_call_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> trans_return_statement (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_body ((kind, body) : mt) : CST.function_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_parameters (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Var_decl (
                      trans_variable_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Local_var_decl (
                      trans_local_variable_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Repeat_stmt (
                      trans_repeat_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_in_stmt (
                      trans_for_in_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Goto_stmt (
                      trans_goto_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Label_stmt (
                      trans_label_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Func_stmt (
                      trans_function_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Local_func_stmt (
                      trans_local_function_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Func_call_stmt (
                      trans_function_call_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> trans_return_statement (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_call_statement ((kind, body) : mt) : CST.function_call_statement =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Prefix_args (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_prefix (Run.matcher_token v0),
                  trans_arguments (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Prefix_COLON_id_args (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_prefix (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_identifier (Run.matcher_token v2),
                  trans_arguments (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_definition ((kind, body) : mt) : CST.function_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_function_body (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_statement ((kind, body) : mt) : CST.function_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_function_name (Run.matcher_token v1),
            trans_function_body (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_statement ((kind, body) : mt) : CST.if_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Var_decl (
                      trans_variable_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Local_var_decl (
                      trans_local_variable_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Repeat_stmt (
                      trans_repeat_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_in_stmt (
                      trans_for_in_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Goto_stmt (
                      trans_goto_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Label_stmt (
                      trans_label_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Func_stmt (
                      trans_function_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Local_func_stmt (
                      trans_local_function_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Func_call_stmt (
                      trans_function_call_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> trans_return_statement (Run.matcher_token v))
              v4
            ,
            Run.repeat
              (fun v -> trans_elseif (Run.matcher_token v))
              v5
            ,
            Run.opt
              (fun v -> trans_else_ (Run.matcher_token v))
              v6
            ,
            Run.trans_token (Run.matcher_token v7)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_in_loop_expression ((kind, body) : mt) : CST.in_loop_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_expression (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_function_statement ((kind, body) : mt) : CST.local_function_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            trans_function_body (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_variable_declaration ((kind, body) : mt) : CST.local_variable_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_local_variable_declarator (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_expression (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_loop_expression ((kind, body) : mt) : CST.loop_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_expression (Run.matcher_token v4),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_prefix ((kind, body) : mt) : CST.prefix =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Self (
            trans_self (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Global_var (
            trans_global_variable (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Var_decl (
            trans_variable_declarator (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Func_call_stmt (
            trans_function_call_statement (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `LPAR_exp_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_repeat_statement ((kind, body) : mt) : CST.repeat_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Var_decl (
                      trans_variable_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Local_var_decl (
                      trans_local_variable_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Repeat_stmt (
                      trans_repeat_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_in_stmt (
                      trans_for_in_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Goto_stmt (
                      trans_goto_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Label_stmt (
                      trans_label_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Func_stmt (
                      trans_function_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Local_func_stmt (
                      trans_local_function_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Func_call_stmt (
                      trans_function_call_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> trans_return_statement (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            trans_expression (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_return_statement ((kind, body) : mt) : CST.return_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_expression (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_expression (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> trans_empty_statement (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_table ((kind, body) : mt) : CST.table =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_field_sequence (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary_operation ((kind, body) : mt) : CST.unary_operation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Not (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `HASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `DASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `TILDE (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variable_declaration ((kind, body) : mt) : CST.variable_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_variable_declarator (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_variable_declarator (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_expression (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variable_declarator ((kind, body) : mt) : CST.variable_declarator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Prefix_LBRACK_exp_RBRACK (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_prefix (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2),
                  Run.trans_token (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Field_exp (
            trans_field_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_while_statement ((kind, body) : mt) : CST.while_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Var_decl (
                      trans_variable_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Local_var_decl (
                      trans_local_variable_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Repeat_stmt (
                      trans_repeat_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_in_stmt (
                      trans_for_in_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Goto_stmt (
                      trans_goto_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Label_stmt (
                      trans_label_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Func_stmt (
                      trans_function_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Local_func_stmt (
                      trans_local_function_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Func_call_stmt (
                      trans_function_call_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> trans_return_statement (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_program ((kind, body) : mt) : CST.program =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Var_decl (
                      trans_variable_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Local_var_decl (
                      trans_local_variable_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Repeat_stmt (
                      trans_repeat_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_in_stmt (
                      trans_for_in_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Goto_stmt (
                      trans_goto_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Label_stmt (
                      trans_label_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Func_stmt (
                      trans_function_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Local_func_stmt (
                      trans_local_function_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Func_call_stmt (
                      trans_function_call_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.opt
              (fun v -> trans_return_statement (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "comment" ->
      (match translate_tree src node trans_comment with
      | None -> None
      | Some x -> Some (Comment (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_program

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

